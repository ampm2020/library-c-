#pragma GCC optimize("Ofast")
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using pii =  pair<int, int>;
using pll =  pair<long long, long long>;
constexpr char ln =  '\n';
constexpr long long MOD = 1000000007LL;
#define all(x) (x).begin(),(x).end()

//Nは桁数が大きい場合があるので文字列として受け取る
string N;
vector<int> n;  //Nの各桁の数字を格納するベクター
int dp[120][2][5];

int main(){
  int k;
  cin >> N >> k;

  //ベクターnを構成
  for(auto a : N){
    n.push_back(a-'0');
  }
  int l = N.size();  //nの長さ

  dp[0][0][0] = 1;  //初期条件。他は0で初期化されている
  for(int i = 0; i < l; i++){
    for(int smaller = 0; smaller < 2; smaller++){
      for(int j = 0; j < 4; j++){
            for(int x = 0; x <= (smaller ? 9 : n[i]); x++){
              int num;
              if(x>0) num = j + 1;
              else num = j;
              dp[i + 1][smaller || x < n[i]][ num ] += dp[i][smaller][j];          
        }
      }
    }
  }

  cout << dp[l][0][k] + dp[l][1][k] << endl;

  return 0;
}