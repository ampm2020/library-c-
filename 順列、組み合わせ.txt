//組み合わせを高速に計算する。オーバーフロー対策済み。
//あらかじめmain関数でCOMinit()関数を実行しておく。
//使用可能範囲はn <= 10^7程度。
//注意点としてMODを取っているため余りを求めない計算には使えない。
//参考  https://drken1215.hatenablog.com/entry/2018/06/08/210000


const int MAX = 2100000;

long long fac[MAX], finv[MAX], inv[MAX];
void COMinit(){
    fac[0] = fac[1] = 1;
    finv[0] = finv[1] = 1;
    inv[1] = 1;
    for(int i = 2; i < MAX; i++){
        fac[i] = fac[i-1] * i % MOD;
        inv[i] = MOD - inv[MOD%i] * (MOD/i) % MOD;
        finv[i] = finv[i-1] * inv[i] % MOD;
    }
}
long long Com(int n, int k){
    if(n < k) return 0;
    if (n < 0 || k < 0) return 0;
    return fac[n] * (finv[k] * finv[n-k] % MOD) % MOD;
}
long long Perm(int n, int k){
    if(n < k) return 0;
    if (n < 0 || k < 0) return 0;
    return fac[n] * finv[n-k] % MOD;
}

//nが巨大なときは愚直に計算する。
/計算時間はO(k)。k<=10^7程度なら間に合う。

ll rui(ll a,ll b){
     ll ans=1;
     while(b>0){
        if(b&1) ans=ans*a%mod;
        a=a*a%mod;
        b/=2;
    }
     return ans;
}

ll COM(ll a, ll b){
    ll ans = 1;
    for(ll i=a; i>a-b; i--){
        ans = ans * i % MOD;
    }
    for(ll i=1; i<=b; i++){
        ans =(ans*rui(i, MOD-2)) % MOD;
    }
    return ans;
}